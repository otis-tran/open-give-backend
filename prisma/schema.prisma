generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model campaign_beneficiaries {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id       String?    @db.Uuid
  beneficiary_id    String?    @db.Uuid
  allocation_amount Decimal?   @db.Decimal(15, 2)
  status            String?    @default("pending")
  created_at        DateTime?  @default(now()) @db.Timestamp(6)
  beneficiary       users?     @relation(fields: [beneficiary_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  campaign          campaigns? @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model campaign_updates {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id String?    @db.Uuid
  title       String     @db.VarChar(255)
  content     String
  images      String[]
  created_by  String?    @db.Uuid
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  campaign    campaigns? @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  creator     users?     @relation("campaign_updates_created_byTouser", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model campaigns {
  id                    String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String                   @db.VarChar(500)
  description           String
  target_amount         Decimal                  @db.Decimal(15, 2)
  current_amount        Decimal?                 @default(0) @db.Decimal(15, 2)
  minimum_beneficiaries Int?                     @default(10)
  current_beneficiaries Int?                     @default(0)
  start_date            DateTime                 @db.Timestamp(6)
  end_date              DateTime                 @db.Timestamp(6)
  status                campaign_status?         @default(draft)
  category              String                   @db.VarChar(100)
  location              String?                  @db.VarChar(255)
  images                String[]
  documents             String[]
  created_by            String?                  @db.Uuid
  created_at            DateTime?                @default(now()) @db.Timestamp(6)
  updated_at            DateTime?                @default(now()) @db.Timestamp(6)
  beneficiaries         campaign_beneficiaries[]
  updates               campaign_updates[]
  creator               users?                   @relation("campaigns_created_byTouser", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  donations             donations[]

  @@index([category], map: "idx_campaigns_category")
  @@index([created_at], map: "idx_campaigns_created_at")
  @@index([start_date, end_date], map: "idx_campaigns_dates")
  @@index([status], map: "idx_campaigns_status")
}

model donations {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id    String?          @db.Uuid
  donor_id       String?          @db.Uuid
  amount         Decimal          @db.Decimal(15, 2)
  message        String?
  is_anonymous   Boolean?         @default(false)
  payment_method String?          @db.VarChar(50)
  transaction_id String?          @db.VarChar(255)
  status         donation_status? @default(pending)
  donated_at     DateTime?        @default(now()) @db.Timestamp(6)
  processed_at   DateTime?        @db.Timestamp(6)
  campaign       campaigns?       @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  donor          users?           @relation(fields: [donor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([campaign_id], map: "idx_donations_campaign_id")
  @@index([donor_id], map: "idx_donations_donor_id")
  @@index([status], map: "idx_donations_status")
}

model kyc_verifications {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String      @db.Uuid
  id_number            String      @db.VarChar(50)
  id_type              id_type
  full_name            String      @db.VarChar(255)
  date_of_birth        DateTime    @db.Date
  address              String
  front_id_image       String
  back_id_image        String
  selfie_image         String
  additional_documents String[]
  verification_method  kyc_method? @default(manual_review)
  status               kyc_status? @default(pending)
  rejection_reason     String?
  verified_by          String?     @db.Uuid
  submitted_at         DateTime?   @default(now()) @db.Timestamp(6)
  verified_at          DateTime?   @db.Timestamp(6)
  user                 users       @relation("UserKyc_user_id", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  verifier             users?      @relation("UserKyc_verified_by", fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([status], map: "idx_kyc_status")
  @@index([user_id], map: "idx_kyc_user_id")
}

model notifications {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?           @db.Uuid
  title      String            @db.VarChar(255)
  message    String
  type       notification_type
  is_read    Boolean?          @default(false)
  related_id String?           @db.Uuid
  created_at DateTime?         @default(now()) @db.Timestamp(6)
  user       users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_read], map: "idx_notifications_is_read")
  @@index([user_id], map: "idx_notifications_user_id")
}

// prisma/schema.prisma
model refresh_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // Tạo cột id riêng làm primary key
  token_hash String    @unique
  user_id    String?   @db.Uuid
  expires_at DateTime  @db.Timestamp(6)
  revoked_at DateTime? @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

model user_login_history {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  ip_address String?   @db.VarChar(50)
  user_agent String?
  success    Boolean?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  user       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_user_login_history_created_at")
  @@index([user_id], map: "idx_user_login_history_user_id")
}

model users {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                  String                   @unique @db.VarChar(255)
  password_hash          String                   @db.VarChar(255)
  full_name              String                   @db.VarChar(255)
  phone                  String?                  @db.VarChar(20)
  avatar_url             String?
  role                   user_role
  is_active              Boolean?                 @default(true)
  is_verified            Boolean?                 @default(false)
  failed_login_attempts  Int?                     @default(0)
  last_failed_login_at   DateTime?                @db.Timestamp(6)
  last_login_at          DateTime?                @db.Timestamp(6)
  token_version          Int?                     @default(0)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  campaign_beneficiaries campaign_beneficiaries[]
  campaign_updates       campaign_updates[]       @relation("campaign_updates_created_byTouser")
  campaigns              campaigns[]              @relation("campaigns_created_byTouser")
  donations              donations[]
  kyc_verifications      kyc_verifications[]      @relation("UserKyc_user_id")
  kyc_verified           kyc_verifications[]      @relation("UserKyc_verified_by")
  notifications          notifications[]
  refresh_tokens         refresh_tokens[]
  user_login_history     user_login_history[]
  two_factor_enabled Boolean? @default(false)
  two_factor_secret  String?  // Secret dùng cho 2FA TOTP (Google Auth ...)

  @@index([email], map: "idx_users_email")
  @@index([failed_login_attempts], map: "idx_users_failed_login_attempts")
  @@index([last_login_at], map: "idx_users_last_login_at")
  @@index([role], map: "idx_users_role")
}

enum campaign_status {
  draft
  active
  paused
  completed
  cancelled
}

enum donation_status {
  pending
  completed
  failed
  refunded
}

enum id_type {
  citizen_id
  passport
  driver_license
}

enum kyc_method {
  manual_review
  government_db
  hospital_verification
}

enum kyc_status {
  pending
  approved
  rejected
  requires_additional_info
}

enum notification_type {
  donation_received
  campaign_update
  kyc_status
  system
}

enum user_role {
  admin
  donor
  beneficiary
}
